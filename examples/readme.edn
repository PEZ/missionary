(require '[missionary.core :as m])

; a task is an effect as a value, aka "IO action" or "recipe"
(def hello-task (m/sp (println "Hello") (m/? (m/sleep 1000)) 42))
(def cancel! (hello-task #(println ::success %) #(println ::failure %)))
; Hello
; ::success 42

; async sequential composition of effects
; no callbacks, pure functional, composed pipeline is a value
; transparent propagation of termination and failure to entrypoint
(def async-hello-task
  (m/sp
    (let [x (m/? hello-task)]   ; run task value and await result
      (m/? hello-task)          ; reuse same task value
      (println "World!")
      x)))

(def cancel! (async-hello-task #(println ::success %) #(println ::failure %)))
; Hello
(cancel!)
; ::failure #error {:cause "Sleep cancelled."}
